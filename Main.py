import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime
import json
import os
import aiosqlite
from ai_helper import AIHelper
from database import create_database, DATABASE_PATH
from db_connection import (
    get_all_cars, add_car, get_car_diagnostics,
    is_admin, add_admin, get_pending_cars, approve_car, reject_car,
    add_pending_car, init_db, get_moderation_stats, get_moderation_history,
    get_all_admins
)
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, BotCommand,
    ReplyKeyboardMarkup, KeyboardButton
)
from validators import is_valid_brand, is_valid_model
import asyncio

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI –ø–æ–º–æ—â–Ω–∏–∫–∞
ai_helper = AIHelper()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7279537099:AAHjMze0OJ40O8K12RAC7xqXEXnu9iqz1_A"

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
EMOJI_PENDING = "‚è≥"
EMOJI_APPROVED = "‚úÖ"
EMOJI_WARNING = "‚ö†Ô∏è"
EMOJI_QUESTION = "‚ùì"
EMOJI_TOOLS = "üîß"
EMOJI_CAR = "üöó"
EMOJI_REJECTED = "‚ùå"
EMOJI_ADMIN = "üëë"
EMOJI_PLUS = "‚ûï"
EMOJI_MENU = "üìö"
EMOJI_APPROVE = "‚úÖ"
EMOJI_REJECT = "‚ùå"

async def get_cars_from_db():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        return await get_all_cars()
    except Exception as e:
        logging.error(f"Error getting cars from DB: {e}")
        return []

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
class CarForm(StatesGroup):
    waiting_for_brand = State()
    waiting_for_model = State()
    waiting_for_year = State()

class QuestionForm(StatesGroup):
    waiting_for_car = State()
    waiting_for_category = State()
    waiting_for_question = State()

class ModerationForm(StatesGroup):
    waiting_for_reject_reason = State()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º
PROBLEM_CATEGORIES = {
    "1": "–î–í–ò–ì–ê–¢–ï–õ–¨ –ò –¢–û–ü–õ–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê",
    "2": "–¢–†–ê–ù–°–ú–ò–°–°–ò–Ø",
    "3": "–ü–û–î–í–ï–°–ö–ê –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï",
    "4": "–¢–û–†–ú–û–ó–ù–ê–Ø –°–ò–°–¢–ï–ú–ê",
    "5": "–≠–õ–ï–ö–¢–†–ò–ö–ê –ò –≠–õ–ï–ö–¢–†–û–ù–ò–ö–ê",
    "6": "–ö–£–ó–û–í –ò –ö–û–ú–§–û–†–¢",
    "7": "–ü–õ–ê–ù–û–í–û–ï –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def get_main_menu_keyboard() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text=f"{EMOJI_CAR} –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"))
    builder.add(types.KeyboardButton(text=f"{EMOJI_QUESTION} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text=f"{EMOJI_CAR} –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"))
    builder.add(types.KeyboardButton(text=f"{EMOJI_QUESTION} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
    builder.adjust(2)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å.",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add_car - –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    )
    if await is_admin(message.from_user.id):
        help_text += (
            "\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "/add_admin - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "/pending_cars - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
            "/moderation_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
            "/moderation_history - –ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        )
    await message.answer(help_text)

@dp.message(Command("add_car"))
async def cmd_add_car(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /add_car –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.set_state(CarForm.waiting_for_brand)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

@dp.message(Command("add_admin"))
async def cmd_add_admin(message: types.Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /add_admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
        async with aiosqlite.connect(DATABASE_PATH) as db:
            async with db.execute('SELECT COUNT(*) FROM admins') as cursor:
                admin_count = (await cursor.fetchone())[0]
                logger.info(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}")
        
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç, –ø–µ—Ä–≤—ã–π –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
        if admin_count == 0:
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.from_user.id}")
            await add_admin(message.from_user.id, message.from_user.username)
            await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            return
        
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        is_user_admin = await is_admin(message.from_user.id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {is_user_admin}")
        
        if not is_user_admin:
            logger.info("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∫–∞–∑–∞–Ω ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        args = message.text.split()
        if len(args) != 2:
            logger.info("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <user_id>")
            return
        
        try:
            new_admin_id = int(args[1])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if await is_admin(new_admin_id):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return
                
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {new_admin_id}")
            await add_admin(new_admin_id, None)  # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ username, —Ç–∞–∫ –∫–∞–∫ –º—ã –µ–≥–æ –Ω–µ –∑–Ω–∞–µ–º
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        except ValueError:
            logger.error("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
            await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ add_admin: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("pending_cars"))
async def cmd_pending_cars(message: types.Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /pending_cars –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    pending_cars = await get_pending_cars()
    if not pending_cars:
        await message.answer("–ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        return

    for car in pending_cars:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{EMOJI_APPROVED} –û–¥–æ–±—Ä–∏—Ç—å",
                    callback_data=f"approve_{car['id']}"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI_WARNING} –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_{car['id']}"
                )
            ]
        ])
        
        await message.answer(
            f"üÜî ID: {car['id']}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {car['user_id']}\n"
            f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car['brand']} {car['model']} ({car['year']})",
            reply_markup=keyboard
        )

@dp.message(Command("moderation_stats"))
async def cmd_moderation_stats(message: types.Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /moderation_stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    stats = await get_moderation_stats()
    if not stats:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞.")
        return

    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
    response += f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
    response += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n"
    response += f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats['pending']}\n"
    
    await message.answer(response)

@dp.message(Command("moderation_history"))
async def cmd_moderation_history(message: types.Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /moderation_history –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    history = await get_moderation_history()
    if not history:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞.")
        return

    response = "üìã –ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
    for record in history[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        action_emoji = "‚úÖ" if record['action'] == 'approve' else "‚ùå"
        response += (f"{action_emoji} {record['brand']} {record['model']} ({record['year']})\n"
                    f"üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {record['admin_name']}\n"
                    f"üìÖ –î–∞—Ç–∞: {record['created_at']}\n")
        if record['reason']:
            response += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {record['reason']}\n"
        response += "\n"

    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@dp.message(F.text)
async def handle_text(message: types.Message, state: FSMContext):
    logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    if current_state is not None:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        if current_state == CarForm.waiting_for_brand:
            await process_brand(message, state)
        elif current_state == CarForm.waiting_for_model:
            await process_model(message, state)
        elif current_state == CarForm.waiting_for_year:
            await process_year(message, state)
        elif current_state == QuestionForm.waiting_for_car:
            await process_car_selection(message, state)
        elif current_state == QuestionForm.waiting_for_category:
            await process_category_selection(message, state)
        elif current_state == QuestionForm.waiting_for_question:
            await process_question(message, state)
        elif current_state == ModerationForm.waiting_for_reject_reason:
            await process_reject_reason(message, state)
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if message.text == f"{EMOJI_CAR} –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏":
        await show_cars(message)
    elif message.text == f"{EMOJI_QUESTION} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await ask_question(message, state)
    elif message.text == f"{EMOJI_PLUS} –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å":
        await cmd_add_car(message, state)
    else:
        # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        builder = ReplyKeyboardBuilder()
        builder.add(types.KeyboardButton(text=f"{EMOJI_CAR} –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"))
        builder.add(types.KeyboardButton(text=f"{EMOJI_QUESTION} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
        builder.adjust(2)
        
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã. –î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
@dp.message(CarForm.waiting_for_brand)
async def process_brand(message: types.Message, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {message.text}")
    await state.update_data(brand=message.text)
    await state.set_state(CarForm.waiting_for_model)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
@dp.message(CarForm.waiting_for_model)
async def process_model(message: types.Message, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {message.text}")
    await state.update_data(model=message.text)
    await state.set_state(CarForm.waiting_for_year)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞
@dp.message(CarForm.waiting_for_year)
async def process_year(message: types.Message, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞: {message.text}")
    try:
        year = int(message.text)
        current_year = datetime.now().year
        
        if year < 1900 or year > current_year:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥: {year}")
            await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 1900 –¥–æ {current_year}")
            return

        user_data = await state.get_data()
        brand = user_data['brand']
        model = user_data['model']
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {brand} {model} {year}")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏
            await add_pending_car(
                user_id=message.from_user.id,
                brand=brand,
                model=model,
                year=year
            )
            logger.info("–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                "‚úÖ –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            admins = await get_all_admins()
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {admins}")
            
            for admin in admins:
                try:
                    admin_id = admin['user_id']
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                    await bot.send_message(
                        admin_id,
                        f"üöó –ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
                        f"–ú–∞—Ä–∫–∞: {brand}\n"
                        f"–ú–æ–¥–µ–ª—å: {model}\n"
                        f"–ì–æ–¥: {year}\n"
                        f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pending_cars –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}", exc_info=True)
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        finally:
            await state.clear()
            
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020)")
        return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def check_car_selection(message: types.Message) -> bool:
    cars = await get_cars_from_db()
    return any(
        f"{car['brand']} {car['model']} ({car['year']})" == message.text
        for car in cars
    )

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"
@dp.message(F.text == f"{EMOJI_CAR} –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏")
async def show_cars(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    cars = await get_cars_from_db()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = ReplyKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if cars:
        for car in cars:
            builder.add(types.KeyboardButton(text=f"{car['brand']} {car['model']} ({car['year']})"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.add(types.KeyboardButton(text=f"{EMOJI_PLUS} –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"))
    builder.add(types.KeyboardButton(text=f"{EMOJI_MENU} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ)
    builder.adjust(1)

    if not cars:
        message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    else:
        message_text = "–í–∞—à–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:"

    await message.answer(
        message_text,
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å" –≤ –º–µ–Ω—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
@dp.message(F.text == f"{EMOJI_PLUS} –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å")
async def handle_add_car(message: types.Message, state: FSMContext):
    # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    await cmd_add_car(message, state)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@dp.message(F.text == f"{EMOJI_QUESTION} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    cars = await get_cars_from_db()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = ReplyKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if cars:
        for car in cars:
            builder.add(types.KeyboardButton(text=f"{car['brand']} {car['model']} ({car['year']})"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(types.KeyboardButton(text=f"{EMOJI_PLUS} –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"))
    builder.add(types.KeyboardButton(text=f"{EMOJI_MENU} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ)
    builder.adjust(1)

    if not cars:
        message_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    else:
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:"

    await message.answer(
        message_text,
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(QuestionForm.waiting_for_car)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å" –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
@dp.message(QuestionForm.waiting_for_car, F.text == f"{EMOJI_PLUS} –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å")
async def add_car_from_question(message: types.Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    await state.clear()
    # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    await cmd_add_car(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message(F.text == f"{EMOJI_MENU} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu(message: types.Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=await get_main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
@dp.message(QuestionForm.waiting_for_car)
async def process_car_selection(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
    cars = await get_cars_from_db()
    selected_car = next(
        (car for car in cars if f"{car['brand']} {car['model']} ({car['year']})" == message.text),
        None
    )
    
    if not selected_car:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
    await state.update_data(selected_car=message.text)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–æ–±–ª–µ–º
    builder = ReplyKeyboardBuilder()
    for num, category in PROBLEM_CATEGORIES.items():
        builder.add(types.KeyboardButton(text=f"{num}. {category}"))
    builder.adjust(1)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(QuestionForm.waiting_for_category)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã
@dp.message(QuestionForm.waiting_for_category)
async def process_category_selection(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    selected_category = None
    for num, category in PROBLEM_CATEGORIES.items():
        if message.text.startswith(f"{num}. "):
            selected_category = category
            break
    
    if not selected_category:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.update_data(selected_category=selected_category)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text=f"{EMOJI_CAR} –ú–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"))
    builder.add(types.KeyboardButton(text=f"{EMOJI_QUESTION} –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
    builder.adjust(2)
    
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(QuestionForm.waiting_for_question)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞
@dp.message(QuestionForm.waiting_for_question)
async def process_question(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    selected_car = data.get('selected_car')
    selected_category = data.get('selected_category')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    question_context = f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {selected_car}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–±–ª–µ–º—ã: {selected_category}\n–í–æ–ø—Ä–æ—Å: {message.text}"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    response = await ai_helper.get_gemini_response(question_context)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=await get_main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith(('approve_', 'reject_')))
async def process_car_moderation(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {callback_query.data}")
    action, car_id = callback_query.data.split('_')
    car_id = int(car_id)

    try:
        if action == 'approve':
            logger.info(f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}")
            # –û–¥–æ–±—Ä—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            user_id = await approve_car(car_id, callback_query.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                user_id,
                "‚úÖ –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç—Ç–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ."
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback_query.answer("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ–¥–æ–±—Ä–µ–Ω")
            await callback_query.message.edit_text(
                callback_query.message.text + "\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ"
            )
            
        elif action == 'reject':
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            await state.set_state(ModerationForm.waiting_for_reject_reason)
            await state.update_data(car_id=car_id)
            
            # –ü—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            await callback_query.message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:"
            )
            await callback_query.answer()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}", exc_info=True)
        await callback_query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
@dp.message(ModerationForm.waiting_for_reject_reason)
async def process_reject_reason(message: types.Message, state: FSMContext):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π car_id
        data = await state.get_data()
        car_id = data['car_id']
        
        logger.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_id} —Å –ø—Ä–∏—á–∏–Ω–æ–π: {message.text}")
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        user_id = await reject_car(car_id, message.from_user.id, message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            f"‚ùå –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_car"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        await message.answer("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await state.clear()

async def update_pending_cars_message(message: types.Message):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    pending_cars = await get_pending_cars()
    if not pending_cars:
        await message.answer("–ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    for car in pending_cars:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                    callback_data=f"approve_{car['id']}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_{car['id']}"
                )
            ]
        ])

        await message.answer(
            f"üöó {car['brand']} {car['model']} ({car['year']})\n"
            f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {car['user_id']}\n"
            f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {car['created_at']}",
            reply_markup=keyboard
        )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
@dp.message(Command("moderation_stats"))
async def cmd_moderation_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return

    stats = await get_moderation_stats()
    if not stats:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞.")
        return

    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
    for stat in stats:
        response += (f"üë§ {stat['admin_name']}:\n"
                    f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stat['approvals']}\n"
                    f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stat['rejections']}\n"
                    f"üìù –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stat['total_actions']}\n\n")

    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
@dp.message(Command("moderation_history"))
async def cmd_moderation_history(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if not await is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        return

    history = await get_moderation_history()
    if not history:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞.")
        return

    response = "üìã –ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
    for record in history[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        action_emoji = "‚úÖ" if record['action'] == 'approve' else "‚ùå"
        response += (f"{action_emoji} {record['brand']} {record['model']} ({record['year']})\n"
                    f"üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {record['admin_name']}\n"
                    f"üìÖ –î–∞—Ç–∞: {record['created_at']}\n")
        if record['reason']:
            response += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {record['reason']}\n"
        response += "\n"

    await message.answer(response)

async def set_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="add_car", description="–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"),
        BotCommand(command="add_admin", description="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"),
        BotCommand(command="pending_cars", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
    ]
    await bot.set_my_commands(commands)

async def main():
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await create_database()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await set_commands(bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
